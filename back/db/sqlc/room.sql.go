// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: room.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    id,
    user_id,
    name,
    created_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, name, created_at
`

type CreateRoomParams struct {
	ID        uuid.UUID
	UserID    int32
	Name      uuid.NullUUID
	CreatedAt time.Time
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.CreatedAt,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getRoom = `-- name: GetRoom :one
SELECT id, user_id, name, created_at FROM rooms WHERE id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :one
SELECT id, user_id, name, created_at FROM rooms
`

func (q *Queries) GetRooms(ctx context.Context) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRooms)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
